{"name":"QuestWeaver","tagline":"Procedurally generated quests and stories for computer games.","body":"# QuestWeaver\r\n\r\n<a href=\"https://travis-ci.org/Cultrarius/QuestWeaver\"><img src=\"https://travis-ci.org/Cultrarius/QuestWeaver.svg\"></a>\r\n<a href=\"https://creativecommons.org/publicdomain/zero/1.0/deed.de\"><img src=\"https://img.shields.io/badge/license-CC0-green.svg\"></a>\r\nProcedurally generated quests and stories for computer games.\r\n\r\nThis project is still in its early stages and under heavy development!\r\n\r\nThis project includes the following JSON parser: https://github.com/open-source-parsers/jsoncpp\r\n\r\n## Features\r\n\r\n* Fully **portable**, **serializable** quest system, perfect for use in savegames. Supports JSON and a compact binary format. \r\n* Separates quest logic from quest data (such as titles/descriptions) by using **template files**.\r\n* Can output the quest properties as simple **text or HTML form** to support rich formatting in the game.\r\n* Uses a complex **weighted graph search** to create new quests.\r\nThis results in more interesting and coherent quest stories as world actors and entities can be reused when fitting.\r\n* Supports **mod directories** to overwrite quest templates after deployment.\r\n* The game world entities to be used in quests are supplied directly from a game's custom world model.\r\n\r\n## Documentation\r\n\r\nHave a look at the [API documentation](http://cultrarius.github.io/QuestWeaver/doxyhtml/)!\r\n\r\n## Usage\r\n\r\nThe quest system of a game is not an isolated part of the system as it is heavily involved in the current world state and events.\r\nTherefore, the game has to provide the quest system with the necessary information about the game's state and has to\r\nfulfill change requests made by the quest system (otherwise the state will be inconsistent).\r\n\r\nTo use the QuestWeaver system, you have to follow these steps:\r\n\r\n* Implement and register custom `TemplateFactory` classes that read your custom template files\r\n* Implement a custom `WorldModel` class\r\n* Register your wold model and template factories with the `QuestWeaver` instance\r\n \r\n```cpp\r\nQuestWeaver Init() {\r\n    // Create your template factories\r\n    shared_ptr<QuestTemplateFactory> questFactory = make_shared<MyQuestTemplateFactory>();\r\n    shared_ptr<StoryTemplateFactory> storyFactory = make_shared<MyStoryTemplateFactory>();\r\n    \r\n    // Create your world model\r\n    auto worldModel = new MyWorldModel();\r\n    shared_ptr<WorldListener> myWorldListener = make_shared<MyWorldListener>();\r\n    \r\n    // Create Configuration\r\n    WeaverConfig config;\r\n    config.worldModel = worldModel;\r\n    config.dirs.modDirectory = \"./Template/\";\r\n    \r\n    // Create the quest system\r\n    QuestWeaver weaver(config);\r\n    weaver.RegisterQuestTemplateFactory(questFactory);\r\n    weaver.RegisterStoryTemplateFactory(storyFactory);\r\n    weaver.GetWorldModel().AddListener(myWorldListener);\r\n    \r\n    return weaver;\r\n}\r\n\r\n// Create new quests\r\nshared_ptr<Quest> newQuest = weaver.CreateNewQuest();\r\n```\r\n\r\n\r\nQuests usually want to change the world state as well as their own state (e.g. when a quest succeeds).\r\nTo do that, you can tick the quest system in your game loop and it will take care of the rest by ticking each quest\r\nseparately.\r\nThe `WorldListener` allows you to change the game state whenever the world model was changed by the quest system.\r\n\r\n```cpp\r\nwhile (true) {\r\n   // game loop ...\r\n   \r\n   weaver.Tick(delta); // updates the world state \r\n}\r\n```\r\n\r\n\r\nYou can also fully serialize the quest system, e.g. to create a save game or to debug it:\r\n\r\n```cpp\r\nvoid SerialTest() {\r\n    QuestWeaver weaver = Init();\r\n    \r\n    // serialize\r\n    stringstream ss; // can also be a file stream\r\n    weaver.Serialize(ss, StreamType::JSON);\r\n    cout << ss.str() << endl; // or save it to disk\r\n    \r\n    // deserialize - it is important to re-register the template factories and the world model listener!\r\n    QuestWeaver deserialized = QuestWeaver::Deserialize(ss, StreamType::JSON, config.dirs);\r\n    weaver.RegisterQuestTemplateFactory(questFactory);\r\n    weaver.RegisterStoryTemplateFactory(storyFactory);\r\n    weaver.GetWorldModel().AddListener(myWorldListener);\r\n}\r\n```\r\n","google":"UA-73638234-1","note":"Don't delete this file! It's used internally to help with page regeneration."}